{"ast":null,"code":"//aliases for types of rooms in map object from server\nexport const roomTypes = {\n  type1: 1,\n  type2: 2,\n  exit: 3 //this is the last room the player is trying to reach\n\n};\nexport const mapSize = 20;\nexport const roomSize = 30; //pixels\n\nconst bgColor = \"#0d1bea\";\nexport const drawMap = (canvas, mapData) => {\n  const ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = bgColor;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n  for (const key in mapData) {\n    const room = mapData[key];\n    const rectPosX = room.x_pos * roomSize;\n    const rectPosY = room.y_pos * roomSize; // if (room.room_type === roomTypes.notCrossable) {\n    //     ctx.fillRect(rectPosX, rectPosY, roomSize, roomSize)\n    // }\n\n    switch (room.room_type) {\n      case roomTypes.type1:\n        ctx.fillStyle = \"#79ea0d\";\n        break;\n\n      case roomTypes.type2:\n        ctx.fillStyle = \"#ea500d\";\n        break;\n\n      case roomTypes.exit:\n        ctx.fillStyle = \"#000000\";\n        break;\n\n      default:\n        console.log(\"Unknown room type: \" + room.room_type);\n    }\n\n    ctx.fillRect(rectPosX, rectPosY, roomSize, roomSize);\n  }\n};","map":{"version":3,"sources":["/Users/josemariodev/dev/lambda/BW/CS26LambdaMud/Django_FE/haunted/src/components/Game/game_helpers.js"],"names":["roomTypes","type1","type2","exit","mapSize","roomSize","bgColor","drawMap","canvas","mapData","ctx","getContext","fillStyle","fillRect","width","height","key","room","rectPosX","x_pos","rectPosY","y_pos","room_type","console","log"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAG;AACrBC,EAAAA,KAAK,EAAE,CADc;AAErBC,EAAAA,KAAK,EAAE,CAFc;AAGrBC,EAAAA,IAAI,EAAE,CAHe,CAGb;;AAHa,CAAlB;AAKP,OAAO,MAAMC,OAAO,GAAG,EAAhB;AACP,OAAO,MAAMC,QAAQ,GAAG,EAAjB,C,CAAqB;;AAE5B,MAAMC,OAAO,GAAG,SAAhB;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACxC,QAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AACAD,EAAAA,GAAG,CAACE,SAAJ,GAAgBN,OAAhB;AACAI,EAAAA,GAAG,CAACG,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBL,MAAM,CAACM,KAA1B,EAAiCN,MAAM,CAACO,MAAxC;;AAEA,OAAI,MAAMC,GAAV,IAAiBP,OAAjB,EAA0B;AACtB,UAAMQ,IAAI,GAAGR,OAAO,CAACO,GAAD,CAApB;AACA,UAAME,QAAQ,GAAGD,IAAI,CAACE,KAAL,GAAad,QAA9B;AACA,UAAMe,QAAQ,GAAGH,IAAI,CAACI,KAAL,GAAahB,QAA9B,CAHsB,CAKtB;AACA;AACA;;AAEA,YAAOY,IAAI,CAACK,SAAZ;AACI,WAAKtB,SAAS,CAACC,KAAf;AACIS,QAAAA,GAAG,CAACE,SAAJ,GAAgB,SAAhB;AACA;;AACJ,WAAKZ,SAAS,CAACE,KAAf;AACIQ,QAAAA,GAAG,CAACE,SAAJ,GAAgB,SAAhB;AACA;;AACJ,WAAKZ,SAAS,CAACG,IAAf;AACIO,QAAAA,GAAG,CAACE,SAAJ,GAAgB,SAAhB;AACA;;AACJ;AACIW,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBP,IAAI,CAACK,SAAzC;AAXR;;AAcAZ,IAAAA,GAAG,CAACG,QAAJ,CAAaK,QAAb,EAAuBE,QAAvB,EAAiCf,QAAjC,EAA2CA,QAA3C;AACH;AACJ,CA9BM","sourcesContent":["//aliases for types of rooms in map object from server\nexport const roomTypes = {\n    type1: 1,\n    type2: 2,\n    exit: 3 //this is the last room the player is trying to reach\n}\nexport const mapSize = 20;\nexport const roomSize = 30; //pixels\n\nconst bgColor = \"#0d1bea\"\n\nexport const drawMap = (canvas, mapData) => {\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n     \n    for(const key in mapData) {\n        const room = mapData[key];\n        const rectPosX = room.x_pos * roomSize;\n        const rectPosY = room.y_pos * roomSize;\n\n        // if (room.room_type === roomTypes.notCrossable) {\n        //     ctx.fillRect(rectPosX, rectPosY, roomSize, roomSize)\n        // }\n\n        switch(room.room_type) {\n            case roomTypes.type1: \n                ctx.fillStyle = \"#79ea0d\"\n                break;\n            case roomTypes.type2:\n                ctx.fillStyle = \"#ea500d\"\n                break;\n            case roomTypes.exit:\n                ctx.fillStyle = \"#000000\"\n                break;\n            default:\n                console.log(\"Unknown room type: \" + room.room_type);\n        }\n\n        ctx.fillRect(rectPosX, rectPosY, roomSize, roomSize)\n    }\n}"]},"metadata":{},"sourceType":"module"}